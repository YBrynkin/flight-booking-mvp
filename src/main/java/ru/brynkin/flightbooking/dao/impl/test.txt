package ru.brynkin.flightbooking.dao.impl;

import java.sql.*;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import ru.brynkin.flightbooking.dao.FlightDao;
import ru.brynkin.flightbooking.entity.Airline;
import ru.brynkin.flightbooking.entity.Airport;
import ru.brynkin.flightbooking.entity.Flight;
import ru.brynkin.flightbooking.enums.FlightStatus;
import ru.brynkin.flightbooking.exception.DaoException;
import ru.brynkin.flightbooking.util.ConnectionManager;

public class FlightDaoImpl implements FlightDao {

    // View-based queries
    private static final String FLIGHT_VIEW_BASE_QUERY = """
        SELECT
            flight_id, flight_number,
            airline_id, airline_name, airline_iata, airline_icao, airline_country, airline_active,
            departure_airport_id, departure_airport_name, departure_city, departure_country,
            departure_iata, departure_icao, departure_timezone,
            arrival_airport_id, arrival_airport_name, arrival_city, arrival_country,
            arrival_iata, arrival_icao, arrival_timezone,
            status_id, status_name,
            departure_time, arrival_time, base_price, duration_minutes
        FROM flight_complete_view""";

    private static final String SELECT_ALL_SQL = FLIGHT_VIEW_BASE_QUERY + " ORDER BY departure_time ASC";
    private static final String SELECT_BY_ID_SQL = FLIGHT_VIEW_BASE_QUERY + " WHERE flight_id = ?";
    private static final String SELECT_BY_CRITERIA_SQL = FLIGHT_VIEW_BASE_QUERY + " WHERE 1=1";

    // Table-based queries for writes
    private static final String INSERT_SQL = """
        INSERT INTO flights (
            flight_number, airline_id, departure_airport_id, arrival_airport_id,
            departure_time, arrival_time, base_price, status_id
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)""";

    private static final String UPDATE_SQL = """
        UPDATE flights SET
            flight_number = ?,
            airline_id = ?,
            departure_airport_id = ?,
            arrival_airport_id = ?,
            departure_time = ?,
            arrival_time = ?,
            base_price = ?,
            status_id = ?
        WHERE flight_id = ?""";

    private static final String DELETE_SQL = "DELETE FROM flights WHERE flight_id = ?";

    // Singleton instance
    private static volatile FlightDaoImpl instance;

    private FlightDaoImpl() {}

    public static FlightDaoImpl getInstance() {
        if (instance == null) {
            synchronized (FlightDaoImpl.class) {
                if (instance == null) {
                    instance = new FlightDaoImpl();
                }
            }
        }
        return instance;
    }

    @Override
    public List<Flight> findAll() throws DaoException {
        try (Connection conn = ConnectionManager.getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(SELECT_ALL_SQL)) {

            List<Flight> flights = new ArrayList<>();
            while (rs.next()) {
                flights.add(mapViewRowToFlight(rs));
            }
            return flights;
        } catch (SQLException e) {
            throw new DaoException("Failed to retrieve all flights", e);
        }
    }

    @Override
    public Optional<Flight> findById(Integer id) throws DaoException {
        try (Connection conn = ConnectionManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(SELECT_BY_ID_SQL)) {

            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                return rs.next() ? Optional.of(mapViewRowToFlight(rs)) : Optional.empty();
            }
        } catch (SQLException e) {
            throw new DaoException("Failed to find flight by ID: " + id, e);
        }
    }

    @Override
    public List<Flight> findByCriteria(Integer departureAirportId, Integer arrivalAirportId,
                                     LocalDate date, FlightStatus status) throws DaoException {
        StringBuilder sqlBuilder = new StringBuilder(SELECT_BY_CRITERIA_SQL);
        List<Object> parameters = new ArrayList<>();

        if (departureAirportId != null) {
            sqlBuilder.append(" AND departure_airport_id = ?");
            parameters.add(departureAirportId);
        }

        if (arrivalAirportId != null) {
            sqlBuilder.append(" AND arrival_airport_id = ?");
            parameters.add(arrivalAirportId);
        }

        if (date != null) {
            sqlBuilder.append(" AND DATE(departure_time) = ?");
            parameters.add(Date.valueOf(date));
        }

        if (status != null) {
            sqlBuilder.append(" AND status_id = ?");
            parameters.add(status.ordinal());
        }

        sqlBuilder.append(" ORDER BY departure_time ASC");

        try (Connection conn = ConnectionManager.getConnection();
             PreparedStatement stmt = conn.prepareStatement(sqlBuilder.toString())) {

            for (int i = 0; i < parameters.size(); i++) {
                stmt.setObject(i + 1, parameters.get(i));
            }

            try (ResultSet rs = stmt.executeQuery()) {
                List<Flight> flights = new ArrayList<>();
                while (rs.next()) {
                    flights.add(mapViewRowToFlight(rs));
                }
                return flights;
            }
        } catch (SQLException e) {
            throw new DaoException("Failed to find flights by criteria", e);
        }
    }

    @Override
    public Flight create(Flight flight) throws DaoException {
        Connection conn = null;
        try {
            conn = ConnectionManager.getConnection();
            conn.setAutoCommit(false);

            // Insert flight
            try (PreparedStatement stmt = conn.prepareStatement(
                    INSERT_SQL, Statement.RETURN_GENERATED_KEYS)) {

                setFlightParameters(stmt, flight);
                stmt.executeUpdate();

                try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        flight.setFlightId(generatedKeys.getInt(1));
                        conn.commit();
                        return flight;
                    }
                    throw new DaoException("Failed to retrieve generated flight ID");
                }
            }
        } catch (SQLException e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    throw new DaoException("Rollback failed", ex);
                }
            }
            throw new DaoException("Failed to create flight", e);
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                } catch (SQLException e) {
                    // Log warning
                }
            }
        }
    }

    @Override
    public Flight update(Flight flight) throws DaoException {
        Connection conn = null;
        try {
            conn = ConnectionManager.getConnection();
            conn.setAutoCommit(false);

            try (PreparedStatement stmt = conn.prepareStatement(UPDATE_SQL)) {
                setFlightParameters(stmt, flight);
                stmt.setInt(9, flight.getFlightId());

                int affectedRows = stmt.executeUpdate();
                if (affectedRows == 0) {
                    throw new DaoException("No flight found with ID: " + flight.getFlightId());
                }
                conn.commit();
                return flight;
            }
        } catch (SQLException e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    throw new DaoException("Rollback failed", ex);
                }
            }
            throw new DaoException("Failed to update flight", e);
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                } catch (SQLException e) {
                    // Log warning
                }
            }
        }
    }

    @Override
    public boolean delete(Integer id) throws DaoException {
        Connection conn = null;
        try {
            conn = ConnectionManager.getConnection();
            conn.setAutoCommit(false);

            try (PreparedStatement stmt = conn.prepareStatement(DELETE_SQL)) {
                stmt.setInt(1, id);
                boolean result = stmt.executeUpdate() > 0;
                conn.commit();
                return result;
            }
        } catch (SQLException e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    throw new DaoException("Rollback failed", ex);
                }
            }
            throw new DaoException("Failed to delete flight", e);
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                } catch (SQLException e) {
                    // Log warning
                }
            }
        }
    }

    // Helper methods
    private Flight mapViewRowToFlight(ResultSet rs) throws SQLException {
        return Flight.builder()
            .flightId(rs.getInt("flight_id"))
            .flightNumber(rs.getString("flight_number"))
            .airline(mapViewRowToAirline(rs))
            .departureAirport(mapViewRowToAirport(rs, "departure_"))
            .arrivalAirport(mapViewRowToAirport(rs, "arrival_"))
            .departureTime(rs.getTimestamp("departure_time").toLocalDateTime())
            .arrivalTime(rs.getTimestamp("arrival_time").toLocalDateTime())
            .basePrice(rs.getBigDecimal("base_price"))
            .status(FlightStatus.values()[rs.getInt("status_id")])
            .build();
    }

    private Airline mapViewRowToAirline(ResultSet rs) throws SQLException {
        return Airline.builder()
            .airlineId(rs.getInt("airline_id"))
            .name(rs.getString("airline_name"))
            .iataCode(rs.getString("airline_iata"))
            .icaoCode(rs.getString("airline_icao"))
            .country(rs.getString("airline_country"))
            .active(rs.getBoolean("airline_active"))
            .build();
    }

    private Airport mapViewRowToAirport(ResultSet rs, String prefix) throws SQLException {
        return Airport.builder()
            .airportId(rs.getInt(prefix + "airport_id"))
            .name(rs.getString(prefix + "airport_name"))
            .city(rs.getString(prefix + "city"))
            .country(rs.getString(prefix + "country"))
            .iataCode(rs.getString(prefix + "iata"))
            .icaoCode(rs.getString(prefix + "icao"))
            .timezone(rs.getString(prefix + "timezone"))
            .build();
    }

    private void setFlightParameters(PreparedStatement stmt, Flight flight) throws SQLException {
        stmt.setString(1, flight.getFlightNumber());
        stmt.setInt(2, flight.getAirline().getAirlineId());
        stmt.setInt(3, flight.getDepartureAirport().getAirportId());
        stmt.setInt(4, flight.getArrivalAirport().getAirportId());
        stmt.setTimestamp(5, Timestamp.valueOf(flight.getDepartureTime()));
        stmt.setTimestamp(6, Timestamp.valueOf(flight.getArrivalTime()));
        stmt.setBigDecimal(7, flight.getBasePrice());
        stmt.setInt(8, flight.getStatus().ordinal());
    }

    // Transaction management example
    public boolean bookFlight(Integer flightId, Integer userId) throws DaoException {
        Connection conn = null;
        try {
            conn = ConnectionManager.getConnection();
            conn.setAutoCommit(false);

            // 1. Check flight availability
            try (PreparedStatement stmt = conn.prepareStatement(
                    "SELECT status_id FROM flights WHERE flight_id = ? FOR UPDATE")) {
                stmt.setInt(1, flightId);
                ResultSet rs = stmt.executeQuery();
                if (!rs.next() || rs.getInt("status_id") != FlightStatus.SCHEDULED.ordinal()) {
                    conn.rollback();
                    return false;
                }
            }

            // 2. Create booking
            try (PreparedStatement stmt = conn.prepareStatement(
                    "INSERT INTO bookings (user_id, flight_id) VALUES (?, ?)")) {
                stmt.setInt(1, userId);
                stmt.setInt(2, flightId);
                stmt.executeUpdate();
            }

            conn.commit();
            return true;
        } catch (SQLException e) {
            if (conn != null) {
                try {
                    conn.rollback();
                } catch (SQLException ex) {
                    throw new DaoException("Rollback failed", ex);
                }
            }
            throw new DaoException("Flight booking failed", e);
        } finally {
            if (conn != null) {
                try {
                    conn.setAutoCommit(true);
                    conn.close();
                } catch (SQLException e) {
                    // Log warning
                }
            }
        }
    }
}